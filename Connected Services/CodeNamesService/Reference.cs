//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeNamesClientSide.CodeNamesService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/DataModels")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayer {
            get {
                return this.IdPlayerField;
            }
            set {
                if ((this.IdPlayerField.Equals(value) != true)) {
                    this.IdPlayerField = value;
                    this.RaisePropertyChanged("IdPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Logic")]
    [System.SerializableAttribute()]
    public partial class Player1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnline {
            get {
                return this.IsOnlineField;
            }
            set {
                if ((this.IsOnlineField.Equals(value) != true)) {
                    this.IsOnlineField = value;
                    this.RaisePropertyChanged("IsOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendshipRequest", Namespace="http://schemas.datacontract.org/2004/07/DataModels")]
    [System.SerializableAttribute()]
    public partial class FriendshipRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdFriendshipRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdReceiverPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdSenderPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CodeNamesClientSide.CodeNamesService.Player ReceiverPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CodeNamesClientSide.CodeNamesService.Player SenderPlayerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdFriendshipRequest {
            get {
                return this.IdFriendshipRequestField;
            }
            set {
                if ((this.IdFriendshipRequestField.Equals(value) != true)) {
                    this.IdFriendshipRequestField = value;
                    this.RaisePropertyChanged("IdFriendshipRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdReceiverPlayer {
            get {
                return this.IdReceiverPlayerField;
            }
            set {
                if ((this.IdReceiverPlayerField.Equals(value) != true)) {
                    this.IdReceiverPlayerField = value;
                    this.RaisePropertyChanged("IdReceiverPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdSenderPlayer {
            get {
                return this.IdSenderPlayerField;
            }
            set {
                if ((this.IdSenderPlayerField.Equals(value) != true)) {
                    this.IdSenderPlayerField = value;
                    this.RaisePropertyChanged("IdSenderPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CodeNamesClientSide.CodeNamesService.Player ReceiverPlayer {
            get {
                return this.ReceiverPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverPlayerField, value) != true)) {
                    this.ReceiverPlayerField = value;
                    this.RaisePropertyChanged("ReceiverPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CodeNamesClientSide.CodeNamesService.Player SenderPlayer {
            get {
                return this.SenderPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderPlayerField, value) != true)) {
                    this.SenderPlayerField = value;
                    this.RaisePropertyChanged("SenderPlayer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CodeNamesService.IPlayerManagerService")]
    public interface IPlayerManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/AddUserAccountToDatabase", ReplyAction="http://tempuri.org/IPlayerManagerService/AddUserAccountToDatabaseResponse")]
        void AddUserAccountToDatabase(string nickname, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/AddUserAccountToDatabase", ReplyAction="http://tempuri.org/IPlayerManagerService/AddUserAccountToDatabaseResponse")]
        System.Threading.Tasks.Task AddUserAccountToDatabaseAsync(string nickname, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/Login", ReplyAction="http://tempuri.org/IPlayerManagerService/LoginResponse")]
        CodeNamesClientSide.CodeNamesService.Player Login(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/Login", ReplyAction="http://tempuri.org/IPlayerManagerService/LoginResponse")]
        System.Threading.Tasks.Task<CodeNamesClientSide.CodeNamesService.Player> LoginAsync(string nickname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/GetCurrentUsers", ReplyAction="http://tempuri.org/IPlayerManagerService/GetCurrentUsersResponse")]
        System.Collections.Generic.Dictionary<int, object> GetCurrentUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/GetCurrentUsers", ReplyAction="http://tempuri.org/IPlayerManagerService/GetCurrentUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, object>> GetCurrentUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/SavePlayerSession", ReplyAction="http://tempuri.org/IPlayerManagerService/SavePlayerSessionResponse")]
        void SavePlayerSession(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/SavePlayerSession", ReplyAction="http://tempuri.org/IPlayerManagerService/SavePlayerSessionResponse")]
        System.Threading.Tasks.Task SavePlayerSessionAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/RemovePlayerSession", ReplyAction="http://tempuri.org/IPlayerManagerService/RemovePlayerSessionResponse")]
        void RemovePlayerSession(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/RemovePlayerSession", ReplyAction="http://tempuri.org/IPlayerManagerService/RemovePlayerSessionResponse")]
        System.Threading.Tasks.Task RemovePlayerSessionAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/UpdatePlayerSession", ReplyAction="http://tempuri.org/IPlayerManagerService/UpdatePlayerSessionResponse")]
        void UpdatePlayerSession(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagerService/UpdatePlayerSession", ReplyAction="http://tempuri.org/IPlayerManagerService/UpdatePlayerSessionResponse")]
        System.Threading.Tasks.Task UpdatePlayerSessionAsync(int idPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerServiceChannel : CodeNamesClientSide.CodeNamesService.IPlayerManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerManagerServiceClient : System.ServiceModel.ClientBase<CodeNamesClientSide.CodeNamesService.IPlayerManagerService>, CodeNamesClientSide.CodeNamesService.IPlayerManagerService {
        
        public PlayerManagerServiceClient(System.ServiceModel.InstanceContext context) {
        }
        
        public PlayerManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUserAccountToDatabase(string nickname, string email, string password) {
            base.Channel.AddUserAccountToDatabase(nickname, email, password);
        }
        
        public System.Threading.Tasks.Task AddUserAccountToDatabaseAsync(string nickname, string email, string password) {
            return base.Channel.AddUserAccountToDatabaseAsync(nickname, email, password);
        }
        
        public CodeNamesClientSide.CodeNamesService.Player Login(string nickname, string password) {
            return base.Channel.Login(nickname, password);
        }
        
        public System.Threading.Tasks.Task<CodeNamesClientSide.CodeNamesService.Player> LoginAsync(string nickname, string password) {
            return base.Channel.LoginAsync(nickname, password);
        }
        
        public System.Collections.Generic.Dictionary<int, object> GetCurrentUsers() {
            return base.Channel.GetCurrentUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, object>> GetCurrentUsersAsync() {
            return base.Channel.GetCurrentUsersAsync();
        }
        
        public void SavePlayerSession(int idPlayer) {
            base.Channel.SavePlayerSession(idPlayer);
        }
        
        public System.Threading.Tasks.Task SavePlayerSessionAsync(int idPlayer) {
            return base.Channel.SavePlayerSessionAsync(idPlayer);
        }
        
        public void RemovePlayerSession(int idPlayer) {
            base.Channel.RemovePlayerSession(idPlayer);
        }
        
        public System.Threading.Tasks.Task RemovePlayerSessionAsync(int idPlayer) {
            return base.Channel.RemovePlayerSessionAsync(idPlayer);
        }
        
        public void UpdatePlayerSession(int idPlayer) {
            base.Channel.UpdatePlayerSession(idPlayer);
        }
        
        public System.Threading.Tasks.Task UpdatePlayerSessionAsync(int idPlayer) {
            return base.Channel.UpdatePlayerSessionAsync(idPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CodeNamesService.ILobbyService", CallbackContract=typeof(CodeNamesClientSide.CodeNamesService.ILobbyServiceCallback))]
    public interface ILobbyService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/SubscribeToUserEvents")]
        void SubscribeToUserEvents();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/SubscribeToUserEvents")]
        System.Threading.Tasks.Task SubscribeToUserEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/UnsubscribeFromUserEvents")]
        void UnsubscribeFromUserEvents();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/UnsubscribeFromUserEvents")]
        System.Threading.Tasks.Task UnsubscribeFromUserEventsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/UserLoggedIn")]
        void UserLoggedIn(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/UserLoggedOut")]
        void UserLoggedOut(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceChannel : CodeNamesClientSide.CodeNamesService.ILobbyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyServiceClient : System.ServiceModel.DuplexClientBase<CodeNamesClientSide.CodeNamesService.ILobbyService>, CodeNamesClientSide.CodeNamesService.ILobbyService {
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToUserEvents() {
            base.Channel.SubscribeToUserEvents();
        }
        
        public System.Threading.Tasks.Task SubscribeToUserEventsAsync() {
            return base.Channel.SubscribeToUserEventsAsync();
        }
        
        public void UnsubscribeFromUserEvents() {
            base.Channel.UnsubscribeFromUserEvents();
        }
        
        public System.Threading.Tasks.Task UnsubscribeFromUserEventsAsync() {
            return base.Channel.UnsubscribeFromUserEventsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CodeNamesService.IFriendListService", CallbackContract=typeof(CodeNamesClientSide.CodeNamesService.IFriendListServiceCallback))]
    public interface IFriendListService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/MakeFriendRequest", ReplyAction="http://tempuri.org/IFriendListService/MakeFriendRequestResponse")]
        int MakeFriendRequest(int IdPlayer, string namePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/MakeFriendRequest", ReplyAction="http://tempuri.org/IFriendListService/MakeFriendRequestResponse")]
        System.Threading.Tasks.Task<int> MakeFriendRequestAsync(int IdPlayer, string namePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/AcceptFriendRequest", ReplyAction="http://tempuri.org/IFriendListService/AcceptFriendRequestResponse")]
        int AcceptFriendRequest(int IdRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/AcceptFriendRequest", ReplyAction="http://tempuri.org/IFriendListService/AcceptFriendRequestResponse")]
        System.Threading.Tasks.Task<int> AcceptFriendRequestAsync(int IdRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/RejectFriendRequest", ReplyAction="http://tempuri.org/IFriendListService/RejectFriendRequestResponse")]
        int RejectFriendRequest(int IdRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/RejectFriendRequest", ReplyAction="http://tempuri.org/IFriendListService/RejectFriendRequestResponse")]
        System.Threading.Tasks.Task<int> RejectFriendRequestAsync(int IdRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/GetFriends", ReplyAction="http://tempuri.org/IFriendListService/GetFriendsResponse")]
        CodeNamesClientSide.CodeNamesService.Player1[] GetFriends(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/GetFriends", ReplyAction="http://tempuri.org/IFriendListService/GetFriendsResponse")]
        System.Threading.Tasks.Task<CodeNamesClientSide.CodeNamesService.Player1[]> GetFriendsAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/GetFriendshipRequests", ReplyAction="http://tempuri.org/IFriendListService/GetFriendshipRequestsResponse")]
        CodeNamesClientSide.CodeNamesService.FriendshipRequest[] GetFriendshipRequests(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/GetFriendshipRequests", ReplyAction="http://tempuri.org/IFriendListService/GetFriendshipRequestsResponse")]
        System.Threading.Tasks.Task<CodeNamesClientSide.CodeNamesService.FriendshipRequest[]> GetFriendshipRequestsAsync(int idPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendListServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/NotifyFriendRequest", ReplyAction="http://tempuri.org/IFriendListService/NotifyFriendRequestResponse")]
        void NotifyFriendRequest(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/NotifyFriendOnline", ReplyAction="http://tempuri.org/IFriendListService/NotifyFriendOnlineResponse")]
        void NotifyFriendOnline(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/UpdateFriendRequest", ReplyAction="http://tempuri.org/IFriendListService/UpdateFriendRequestResponse")]
        void UpdateFriendRequest(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/UpdateFriendDisplay", ReplyAction="http://tempuri.org/IFriendListService/UpdateFriendDisplayResponse")]
        void UpdateFriendDisplay();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendListServiceChannel : CodeNamesClientSide.CodeNamesService.IFriendListService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendListServiceClient : System.ServiceModel.DuplexClientBase<CodeNamesClientSide.CodeNamesService.IFriendListService>, CodeNamesClientSide.CodeNamesService.IFriendListService {
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int MakeFriendRequest(int IdPlayer, string namePlayer) {
            return base.Channel.MakeFriendRequest(IdPlayer, namePlayer);
        }
        
        public System.Threading.Tasks.Task<int> MakeFriendRequestAsync(int IdPlayer, string namePlayer) {
            return base.Channel.MakeFriendRequestAsync(IdPlayer, namePlayer);
        }
        
        public int AcceptFriendRequest(int IdRequest) {
            return base.Channel.AcceptFriendRequest(IdRequest);
        }
        
        public System.Threading.Tasks.Task<int> AcceptFriendRequestAsync(int IdRequest) {
            return base.Channel.AcceptFriendRequestAsync(IdRequest);
        }
        
        public int RejectFriendRequest(int IdRequest) {
            return base.Channel.RejectFriendRequest(IdRequest);
        }
        
        public System.Threading.Tasks.Task<int> RejectFriendRequestAsync(int IdRequest) {
            return base.Channel.RejectFriendRequestAsync(IdRequest);
        }
        
        public CodeNamesClientSide.CodeNamesService.Player1[] GetFriends(int idPlayer) {
            return base.Channel.GetFriends(idPlayer);
        }
        
        public System.Threading.Tasks.Task<CodeNamesClientSide.CodeNamesService.Player1[]> GetFriendsAsync(int idPlayer) {
            return base.Channel.GetFriendsAsync(idPlayer);
        }
        
        public CodeNamesClientSide.CodeNamesService.FriendshipRequest[] GetFriendshipRequests(int idPlayer) {
            return base.Channel.GetFriendshipRequests(idPlayer);
        }
        
        public System.Threading.Tasks.Task<CodeNamesClientSide.CodeNamesService.FriendshipRequest[]> GetFriendshipRequestsAsync(int idPlayer) {
            return base.Channel.GetFriendshipRequestsAsync(idPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CodeNamesService.IGameManagerService", CallbackContract=typeof(CodeNamesClientSide.CodeNamesService.IGameManagerServiceCallback))]
    public interface IGameManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/CreateRoom", ReplyAction="http://tempuri.org/IGameManagerService/CreateRoomResponse")]
        bool CreateRoom(string hostUsername, string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/CreateRoom", ReplyAction="http://tempuri.org/IGameManagerService/CreateRoomResponse")]
        System.Threading.Tasks.Task<bool> CreateRoomAsync(string hostUsername, string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/GenerateRoomCode", ReplyAction="http://tempuri.org/IGameManagerService/GenerateRoomCodeResponse")]
        string GenerateRoomCode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/GenerateRoomCode", ReplyAction="http://tempuri.org/IGameManagerService/GenerateRoomCodeResponse")]
        System.Threading.Tasks.Task<string> GenerateRoomCodeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/CheckQuota", ReplyAction="http://tempuri.org/IGameManagerService/CheckQuotaResponse")]
        bool CheckQuota(string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/CheckQuota", ReplyAction="http://tempuri.org/IGameManagerService/CheckQuotaResponse")]
        System.Threading.Tasks.Task<bool> CheckQuotaAsync(string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/RecoverRoomPlayers", ReplyAction="http://tempuri.org/IGameManagerService/RecoverRoomPlayersResponse")]
        CodeNamesClientSide.CodeNamesService.Player1[] RecoverRoomPlayers(string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/RecoverRoomPlayers", ReplyAction="http://tempuri.org/IGameManagerService/RecoverRoomPlayersResponse")]
        System.Threading.Tasks.Task<CodeNamesClientSide.CodeNamesService.Player1[]> RecoverRoomPlayersAsync(string roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/Connect", ReplyAction="http://tempuri.org/IGameManagerService/ConnectResponse")]
        void Connect(string username, string roomId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/Connect", ReplyAction="http://tempuri.org/IGameManagerService/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(string username, string roomId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/Disconnect", ReplyAction="http://tempuri.org/IGameManagerService/DisconnectResponse")]
        void Disconnect(string username, string roomId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagerService/Disconnect", ReplyAction="http://tempuri.org/IGameManagerService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string username, string roomId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagerService/SendMessage")]
        void SendMessage(string message, string username, string roomId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagerService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message, string username, string roomId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagerService/MessageCallBack")]
        void MessageCallBack(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerServiceChannel : CodeNamesClientSide.CodeNamesService.IGameManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameManagerServiceClient : System.ServiceModel.DuplexClientBase<CodeNamesClientSide.CodeNamesService.IGameManagerService>, CodeNamesClientSide.CodeNamesService.IGameManagerService {
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool CreateRoom(string hostUsername, string roomId) {
            return base.Channel.CreateRoom(hostUsername, roomId);
        }
        
        public System.Threading.Tasks.Task<bool> CreateRoomAsync(string hostUsername, string roomId) {
            return base.Channel.CreateRoomAsync(hostUsername, roomId);
        }
        
        public string GenerateRoomCode() {
            return base.Channel.GenerateRoomCode();
        }
        
        public System.Threading.Tasks.Task<string> GenerateRoomCodeAsync() {
            return base.Channel.GenerateRoomCodeAsync();
        }
        
        public bool CheckQuota(string roomId) {
            return base.Channel.CheckQuota(roomId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckQuotaAsync(string roomId) {
            return base.Channel.CheckQuotaAsync(roomId);
        }
        
        public CodeNamesClientSide.CodeNamesService.Player1[] RecoverRoomPlayers(string roomId) {
            return base.Channel.RecoverRoomPlayers(roomId);
        }
        
        public System.Threading.Tasks.Task<CodeNamesClientSide.CodeNamesService.Player1[]> RecoverRoomPlayersAsync(string roomId) {
            return base.Channel.RecoverRoomPlayersAsync(roomId);
        }
        
        public void Connect(string username, string roomId, string message) {
            base.Channel.Connect(username, roomId, message);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string username, string roomId, string message) {
            return base.Channel.ConnectAsync(username, roomId, message);
        }
        
        public void Disconnect(string username, string roomId, string message) {
            base.Channel.Disconnect(username, roomId, message);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string username, string roomId, string message) {
            return base.Channel.DisconnectAsync(username, roomId, message);
        }
        
        public void SendMessage(string message, string username, string roomId) {
            base.Channel.SendMessage(message, username, roomId);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, string username, string roomId) {
            return base.Channel.SendMessageAsync(message, username, roomId);
        }
    }
}
